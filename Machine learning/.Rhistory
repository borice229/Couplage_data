result_indicator <- calculate_sensitivity_indicateur(test_gradients)
# Vérifier le résultat
if (all.equal(result_indicator, expected_indicator, tolerance = 1e-2)) {
return("OK")
} else {
return(paste("Test Échec: Attendu =", expected_indicator, "Obtenu =", result_indicator))
}
}
test_calculate_sensitivity_indicateur()
Stock_sensitivity_params <- function(param_list, N) {
# Vérifier que chaque élément de param_list contient les paramètres nécessaires
if (!all(c("a", "b", "c", "U0") %in% names(param_list[[1]]))) {
stop("Les paramètres doivent inclure 'a', 'b', 'c', et 'U0'.")
}
# Initialiser une liste vide pour stocker les résultats
stock <- vector("list", length(param_list))
# Parcourir chaque ensemble de paramètres dans la liste
for (i in seq_along(param_list)) {
params <- param_list[[i]]
a <- params$a
b <- params$b
c <- params$c
U0 <- params$U0
# Calculer les gradients pour cet ensemble de paramètres
gradients <- calculate_gradient(N, a, b, c, U0)
# Calculer l'indicateur de sensibilité pour les gradients obtenus
indicator <- round(calculate_sensitivity_indicateur(gradients), 2)
# Ajouter les résultats à la liste
stock[[i]] <- data.frame(a = a, b = b, c = c, U0 = U0, Indicator = indicator)
}
# Convertir la liste en un DataFrame final
stock <- do.call(rbind, stock)
return(stock)
}
# Exemple de liste de paramètres
param_list <- list(
list(a = 1, b = 2, c = 3, U0 = 0.5),
list(a = 2, b = 1.5, c = 2.5, U0 = 1),
list(a = 3, b = 3, c = 1, U0 = 0.2)
)
# Appeler la fonction avec N = 5
N <- 5
results <- Stock_sensitivity_params(param_list, N)
# Afficher les résultats
print(results)
Stock_sensitivity_params <- function(param_list, N) {
# Initialiser une liste vide pour stocker les résultats
stock <- data.frame(a = numeric(), b = numeric(), c = numeric(), U0 = numeric(), Indicator = numeric())
# Parcourir chaque ensemble de paramètres dans la liste
for (params in param_list) {
a <- params$a
b <- params$b
c <- params$c
U0 <- params$U0
# Calculer les gradients pour cet ensemble de paramètres
gradients <- calculate_gradient(N, a, b, c, U0)
# Calculer l'indicateur de sensibilité pour les gradients obtenus
indicator <- round(calculate_sensitivity_indicateur(gradients),2)
# Ajouter les résultats à la base stock
stock <- rbind(stock, data.frame(a = a, b = b, c = c, U0 = U0, Indicator = indicator))
}
return(stock)
}
# Exemple de liste de paramètres
param_list <- list(
list(a = 1, b = 2, c = 3, U0 = 0.5),
list(a = 2, b = 1.5, c = 2.5, U0 = 1),
list(a = 3, b = 3, c = 1, U0 = 0.2)
)
# Appeler la fonction avec N = 5
N <- 5
results <- Stock_sensitivity_params(param_list, N)
# Afficher les résultats
print(results)
Stock_sensitivity_params <- function(param_list, N) {
# Initialiser une liste vide pour stocker les résultats
stock <- data.frame(a = numeric(), b = numeric(), c = numeric(), U0 = numeric(), Indicator = numeric())
# Parcourir chaque ensemble de paramètres dans la liste
for (params in param_list) {
a <- params$a
b <- params$b
c <- params$c
U0 <- params$U0
# Calculer les gradients pour cet ensemble de paramètres
gradients <- calculate_gradient(N, a, b, c, U0)
# Calculer l'indicateur de sensibilité pour les gradients obtenus
indicator <- round(calculate_sensitivity_indicateur(gradients),2)
# Ajouter les résultats à la base stock
stock <- rbind(stock, data.frame(a = a, b = b, c = c, U0 = U0, Indicator = indicator))
}
return(stock)
}
# Exemple de liste de paramètres
param_list <- list(
list(a = 1, b = 2, c = 3, U0 = 0.5),
list(a = 2, b = 1.5, c = 2.5, U0 = 1),
list(a = 3, b = 3, c = 1, U0 = 0.2)
)
# Appeler la fonction avec N = 5
N <- 5
results <- Stock_sensitivity_params(param_list, N)
# Afficher les résultats
print(results)
test_Stock_sensitivity_params <- function() {
# Définir des ensembles de paramètres pour tester la fonction
param_list <- list(
list(a = 1, b = 2, c = 3, U0 = 0.5),
list(a = 2, b = 1.5, c = 2.5, U0 = 1),
list(a = 3, b = 3, c = 1, U0 = 0.2)
)
N <- 5
# Appeler la fonction Stock_sensitivity_params avec ces paramètres
result <- Stock_sensitivity_params(param_list, N)
# Résultats attendus pour comparaison (exemples fictifs)
expected_result <- data.frame(
a = c(1, 2, 3),
b = c(2, 1.5, 3),
c = c(3, 2.5, 1),
U0 = c(0.5, 1, 0.2),
Indicator = c(1.23, 0.95, 1.78) # Valeurs fictives, ajustez selon les résultats attendus
)
# Vérifier que la structure du résultat est correcte (les mêmes colonnes)
if (!all(colnames(result) == colnames(expected_result))) {
return("Erreur : Les noms des colonnes ne correspondent pas.")
}
# Vérifier si les résultats sont proches de ceux attendus (à une certaine tolérance)
tolerance <- 0.1
for (i in 1:nrow(result)) {
if (abs(result$Indicator[i] - expected_result$Indicator[i]) > tolerance) {
return(paste("Erreur : L'indicateur à la ligne", i, "diffère de plus de la tolérance permise."))
}
}
# Si tout est correct
return("ok")
}
# Exécution du test
test_Stock_sensitivity_params()
Stock_sensitivity_params <- function(param_list, N) {
# Vérifier que chaque élément de param_list contient les paramètres nécessaires
if (!all(c("a", "b", "c", "U0") %in% names(param_list[[1]]))) {
stop("Les paramètres doivent inclure 'a', 'b', 'c', et 'U0'.")
}
# Initialiser une liste vide pour stocker les résultats
stock <- vector("list", length(param_list))
# Parcourir chaque ensemble de paramètres dans la liste
for (i in seq_along(param_list)) {
params <- param_list[[i]]
a <- params$a
b <- params$b
c <- params$c
U0 <- params$U0
# Calculer les gradients pour cet ensemble de paramètres
gradients <- calculate_gradient(N, a, b, c, U0)
# Calculer l'indicateur de sensibilité pour les gradients obtenus
indicator <- round(calculate_sensitivity_indicateur(gradients), 2)
# Ajouter les résultats à la liste
stock[[i]] <- data.frame(a = a, b = b, c = c, U0 = U0, Indicator = indicator)
}
# Convertir la liste en un DataFrame final
stock <- do.call(rbind, stock)
return(stock)
}
test_Stock_sensitivity_params <- function() {
# Définir des ensembles de paramètres pour tester la fonction
param_list <- list(
list(a = 1, b = 2, c = 3, U0 = 0.5),
list(a = 2, b = 1.5, c = 2.5, U0 = 1),
list(a = 3, b = 3, c = 1, U0 = 0.2)
)
N <- 5
# Appeler la fonction Stock_sensitivity_params avec ces paramètres
result <- Stock_sensitivity_params(param_list, N)
# Résultats attendus pour comparaison (exemples fictifs)
expected_result <- data.frame(
a = c(1, 2, 3),
b = c(2, 1.5, 3),
c = c(3, 2.5, 1),
U0 = c(0.5, 1, 0.2),
Indicator = c(1.23, 0.95, 1.78) # Valeurs fictives, ajustez selon les résultats attendus
)
# Vérifier que la structure du résultat est correcte (les mêmes colonnes)
if (!all(colnames(result) == colnames(expected_result))) {
return("Erreur : Les noms des colonnes ne correspondent pas.")
}
# Vérifier si les résultats sont proches de ceux attendus (à une certaine tolérance)
tolerance <- 0.1
for (i in 1:nrow(result)) {
if (abs(result$Indicator[i] - expected_result$Indicator[i]) > tolerance) {
return(paste("Erreur : L'indicateur à la ligne", i, "diffère de plus de la tolérance permise."))
}
}
# Si tout est correct
return("ok")
}
# Exécution du test
test_Stock_sensitivity_params()
# Si tout est correct
return("Test réussi !")
get_sensibility <- function(stock) {
# Calculer la médiane de la colonne Indicator
median_value <- median(stock$Indicator, na.rm = TRUE)
# Trouver l'indice de la ligne dont la valeur d'Indicator est la plus proche de la médiane
closest_index <- which.min(abs(stock$Indicator - median_value))
# Retourner la ligne correspondante
selected_row <- stock[closest_index, ]
return(selected_row)
}
test_get_sensibility <- function() {
# Créer un dataframe de test avec des valeurs prédéfinies
stock <- data.frame(
a = c(1, 2, 3, 4, 5),
b = c(10, 15, 20, 25, 30),
c = c(0.5, 1, 1.5, 2, 2.5),
U0 = c(1, 2, 3, 4, 5),
Indicator = c(2, 7, 12, 3, 9)  # Valeurs arbitraires
)
# Résultat attendu : médiane = 7, la ligne la plus proche de 7 est la 2ème (Indice 2)
expected_result <- stock[2, ]
# Appeler la fonction get_sensibility
result <- get_sensibility(stock)
# Vérification si le résultat correspond à ce qui est attendu
if (all(result == expected_result)) {
return("Test réussi !")
} else {
return("Erreur : Résultat incorrect")
}
}
# Exécution du test
test_get_sensibility()
test_get_sensibility <- function() {
# Créer un dataframe de test avec des valeurs prédéfinies
stock <- data.frame(
a = c(1, 2, 3, 4, 5),
b = c(10, 15, 20, 25, 30),
c = c(0.5, 1, 1.5, 2, 2.5),
U0 = c(1, 2, 3, 4, 5),
Indicator = c(2, 7, 12, 3, 9)  # Valeurs arbitraires
)
# Résultat attendu : médiane = 7, la ligne la plus proche de 7 est la 2ème (Indice 2)
expected_result <- stock[2, ]
# Appeler la fonction get_sensibility
result <- get_sensibility(stock)
# Vérification si le résultat correspond à ce qui est attendu
if (all(result == expected_result)) {
return("ok")
} else {
return("Erreur : Résultat incorrect")
}
}
# Exécution du test
test_get_sensibility()
set.seed(123) # Pour des résultats reproductibles
n <- 50 # Nombre de simulations souhaité
# Simulation à partir des lois normales
sim_a <- rnorm(n, mean = 3, sd = 0.5)
sim_b <- rnorm(n, mean = 4, sd = 0.4)
sim_c <- rnorm(n, mean = 0.6, sd = 0.05)
sim_U0 <- round(runif(5, min = 1, max = 10),0)
# Créer les histogrammes
par(mfrow = c(1, 3))  # Pour afficher les 3 histogrammes côte à côte
hist(sim_a, main = "Histogramme de a", xlab = "a", col = "lightblue", breaks = 30)
hist(sim_b, main = "Histogramme de b", xlab = "b", col = "lightgreen", breaks = 30)
hist(sim_c, main = "Histogramme de c", xlab = "c", col = "lightcoral", breaks = 30)
# Exemple d'utilisation : définir plusieurs ensembles de paramètres
param_list <- list(
list(a = 2, b = 2.5, c = 0.4, U0 = 1),
list(a = 3.0, b = 4.0, c = 0.6, U0 = 1),
list(a = 2.0, b = 3.0, c = 0.5, U0 = 1),
list(a = 5.0, b = 5.0, c = 0.7, U0 = 1)
)
# Trouver les paramètres avec la meilleure sensibilité
Param_sim <- get_sensibility(Stock_sensitivity_params(param_list, N = 100))
print(Param_sim)
set.seed(123) # Pour des résultats reproductibles
n <- 50 # Nombre de simulations souhaité
# Simulation à partir des lois normales
sim_a <- rnorm(n, mean = 3, sd = 0.2)
sim_b <- rnorm(n, mean = 4, sd = 0.3)
sim_c <- rnorm(n, mean = 0.6, sd = 0.05)
sim_U0 <- round(runif(5, min = 1, max = 10),0)
# Créer les histogrammes
par(mfrow = c(1, 3))  # Pour afficher les 3 histogrammes côte à côte
hist(sim_a, main = "Histogramme de a", xlab = "a", col = "lightblue", breaks = 30)
hist(sim_b, main = "Histogramme de b", xlab = "b", col = "lightgreen", breaks = 30)
hist(sim_c, main = "Histogramme de c", xlab = "c", col = "lightcoral", breaks = 30)
# Étape 1 : Obtenez l'ensemble de paramètres avec la meilleure sensibilité
param_list <- list(
list(a = 2, b = 2.5, c = 0.4, U0 = 1),
list(a = 3.0, b = 4.0, c = 0.6, U0 = 1),
list(a = 2.0, b = 3.0, c = 0.5, U0 = 1),
list(a = 5.0, b = 5.0, c = 0.7, U0 = 1)
)
# Appliquer la fonction pour obtenir les paramètres les plus sensibles
Param_sim <- get_sensibility(Stock_sensitivity_params(param_list, N = 100))
# Étape 2 : Générer des simulations autour de ces paramètres
set.seed(123)  # Pour des résultats reproductibles
# Récupérer les valeurs optimales
best_params <- Param_sim[1, c("a", "b", "c", "U0")]
# Générer des simulations pour chaque paramètre autour des meilleures valeurs
n <- 50  # Nombre de simulations souhaité
# Générer des simulations pour 'a', 'b', 'c' et 'U0' autour des valeurs optimales
sim_a <- rnorm(n, mean = best_params$a, sd = 0.1)  # Variation autour de 'a'
sim_b <- rnorm(n, mean = best_params$b, sd = 0.1)  # Variation autour de 'b'
sim_c <- rnorm(n, mean = best_params$c, sd = 0.05)  # Variation autour de 'c'
sim_U0 <- rnorm(n, mean = best_params$U0, sd = 0.5)  # Variation autour de 'U0'
# Étape 3 : Créer les histogrammes pour visualiser les simulations
par(mfrow = c(2, 2))  # Afficher les 4 histogrammes dans une grille 2x2
# Histogramme pour 'a'
hist(sim_a, main = "Histogramme de a", xlab = "a", col = "lightblue", breaks = 30)
# Histogramme pour 'b'
hist(sim_b, main = "Histogramme de b", xlab = "b", col = "lightgreen", breaks = 30)
# Histogramme pour 'c'
hist(sim_c, main = "Histogramme de c", xlab = "c", col = "lightcoral", breaks = 30)
# Histogramme pour 'U0'
hist(sim_U0, main = "Histogramme de U0", xlab = "U0", col = "lightgoldenrodyellow", breaks = 30)
# Optionnel : Affichage des paramètres optimaux pour vérifier
print(best_params)
set.seed(123) # Pour des résultats reproductibles
n <- 50 # Nombre de simulations souhaité
# Simulation à partir des lois normales
sim_a <- rnorm(n, mean = 3, sd = 0.2)
sim_b <- rnorm(n, mean = 4, sd = 0.3)
sim_c <- rnorm(n, mean = 0.6, sd = 0.05)
sim_U0 <- round(runif(5, min = 1, max = 10),0)
# Créer les histogrammes
par(mfrow = c(1, 3))  # Pour afficher les 3 histogrammes côte à côte
hist(sim_a, main = "Histogramme de a", xlab = "a", col = "lightblue", breaks = 30)
hist(sim_b, main = "Histogramme de b", xlab = "b", col = "lightgreen", breaks = 30)
hist(sim_c, main = "Histogramme de c", xlab = "c", col = "lightcoral", breaks = 30)
# Simulation des paramètres pour n individus
set.seed(123)  # Pour la reproductibilité
M <- 100  # Nombre d'individus
N <- 40  # Nombre d'itérations
sim_a <- round(rnorm(M, mean = 3, sd = 0.2),2)  # Simulation des paramètres a
sim_b <- round(rnorm(M, mean = 4, sd = 0.3),2)  # Simulation des paramètres b
sim_c <- round(rnorm(M, mean = 0.6, sd = 0.05),2)  # Simulation des paramètres c
sim_Uo<-round(runif(M,min=1,max=10),2)
# Générer une base de données avec les valeurs de a, b, c et U[0], U[1], ..., U[N]
base_root <- data.frame(matrix(ncol = N + 4, nrow = M))  # Base vide (n lignes, N+4 colonnes)
# Noms des colonnes : a, b, c, U[0], ..., U[100]
colnames(base_root) <- c("a", "b", "c", paste0("U", 0:N))
# Remplir la base avec les valeurs simulées de a, b, c et les valeurs de U
for (i in 1:M) {
base_root[i, 1] <- sim_a[i]  # Valeur de a
base_root[i, 2] <- sim_b[i]  # Valeur de b
base_root[i, 3] <- sim_c[i]  # Valeur de c
base_root[i, 4] <- sim_Uo[i]  # Valeur de Uo
U_values <- round(Generate_output(N, sim_a[i], sim_b[i], sim_c[i], sim_Uo[i]),2) #
base_root[i, 4:(N + 4)] <- U_values  #
}
base_root %>%
mutate(Individu = 1:M) %>%               # Ajouter la colonne 'Individu'
melt(id.vars = c("a", "b", "c", "Individu"),
variable.name = "Iteration",
value.name = "U") %>%                # Restructurer le dataframe
mutate(Iteration = as.numeric(gsub("U", "", Iteration))) %>%  # Convertir la colonne 'Iteration' en numérique
ggplot(aes(x = Iteration, y = U, color = factor(Individu))) + # Graphique ggplot
geom_line(size = 1) +                     # Tracer les courbes pour chaque individu
labs(title = "Évolution de U[n] pour chaque individu",
x = "Itération (N)",
y = "Valeur de U[N]",
color = "Individu") +
theme_minimal()
library(ggplot2)
library(reshape2)
library(dplyr)
# Simulation des paramètres pour n individus
set.seed(123)  # Pour la reproductibilité
M <- 100  # Nombre d'individus
N <- 40  # Nombre d'itérations
# Simulation des paramètres a, b, c, et U0
sim_a <- round(rnorm(M, mean = 3, sd = 0.2), 2)  # Simulation des paramètres a
sim_b <- round(rnorm(M, mean = 4, sd = 0.3), 2)  # Simulation des paramètres b
sim_c <- round(rnorm(M, mean = 0.6, sd = 0.05), 2)  # Simulation des paramètres c
sim_Uo <- round(runif(M, min = 1, max = 10), 2)  # Simulation des valeurs initiales de U0
# Générer une base de données avec les valeurs de a, b, c et U[0], U[1], ..., U[N]
base_root <- data.frame(matrix(ncol = N + 4, nrow = M))  # Base vide (n lignes, N+4 colonnes)
# Noms des colonnes : a, b, c, U[0], ..., U[100]
colnames(base_root) <- c("a", "b", "c", paste0("U", 0:N))
# Remplir la base avec les valeurs simulées de a, b, c et les valeurs de U
for (i in 1:M) {
base_root[i, 1] <- sim_a[i]  # Valeur de a
base_root[i, 2] <- sim_b[i]  # Valeur de b
base_root[i, 3] <- sim_c[i]  # Valeur de c
base_root[i, 4] <- sim_Uo[i]  # Valeur de Uo
# Calculer les valeurs de U à l'aide de la fonction Generate_output (assurez-vous qu'elle est définie)
U_values <- round(Generate_output(N, sim_a[i], sim_b[i], sim_c[i], sim_Uo[i]), 2)
# Ajouter les valeurs de U dans la base
base_root[i, 4:(N + 4)] <- U_values
}
# Restructurer les données pour le graphique
base_root %>%
mutate(Individu = 1:M) %>%               # Ajouter la colonne 'Individu'
melt(id.vars = c("a", "b", "c", "Individu"),
variable.name = "Iteration",
value.name = "U") %>%                # Restructurer le dataframe
mutate(Iteration = as.numeric(gsub("U", "", Iteration))) %>%  # Convertir la colonne 'Iteration' en numérique
ggplot(aes(x = Iteration, y = U, color = factor(Individu))) + # Graphique ggplot
geom_line(linewidth = 1) +                     # Remplacer 'size' par 'linewidth'
labs(title = "Évolution de U[n] pour chaque individu",
x = "Itération (N)",
y = "Valeur de U[N]",
color = "Individu") +
theme_minimal()
View(base_root)
# Générer une base de données avec les valeurs de a, b, c et U[0], U[1], ..., U[100]
base_brutee <- data.frame(matrix(ncol = N + 4, nrow = M))  # Base vide (n lignes, N+4 colonnes)
# Noms des colonnes : a, b, c, U[0], ..., U[100]
colnames(base_brutee) <- c("a", "b", "c", paste0("U", 0:N))
# Remplir la base avec les valeurs simulées de a, b, c et les valeurs de U
for (i in 1:M) {
base_brutee[i, 1] <- sim_a[i]  # Valeur de a
base_brutee[i, 2] <- sim_b[i]  # Valeur de b
base_brutee[i, 3] <- sim_c[i]  # Valeur de c
base_brutee[i, 4] <- sim_Uo[i]  # Valeur de Uo
U_values_bruité <- Generate_output(N, sim_a[i], sim_b[i], sim_c[i], sim_Uo[i])+  rnorm(1, mean = 0, sd = 1)  # Générer U[0] à U[100] bruité
base_brutee[i, 4:(N + 4)] <- U_values_bruité  # Remplir les colonnes U[0] à U[100]
}
base_brutee %>%
mutate(Individu = 1:M) %>%               # Ajouter la colonne 'Individu'
melt(id.vars = c("a", "b", "c", "Individu"),
variable.name = "Iteration",
value.name = "U") %>%                # Restructurer le dataframe
mutate(Iteration = as.numeric(gsub("U", "", Iteration))) %>%  # Convertir la colonne 'Iteration' en numérique
ggplot(aes(x = Iteration, y = U, color = factor(Individu))) + # Graphique ggplot
geom_line(size = 1) +                     # Tracer les courbes pour chaque individu
labs(title = "Évolution de U[n] bruité pour chaque individu",
x = "Itération (N)",
y = "Valeur de U[N]",
color = "Individu") +
theme_minimal()
U_values_bruité <- Generate_output_with_noise(N, sim_a[i], sim_b[i], sim_c[i], sim_Uo[i])  # Générer U[0] à U[100] bruité
U_values_bruité <- Generate_output_with_noise(N, sim_a[i], sim_b[i], sim_c[i], sim_Uo[i])  # Générer
# Définition de la fonction avec ajout de bruit
Generate_output_with_noise <- function(N, a, b, c, U0) {
U <- numeric(N + 1)
U[1] <- U0
for (n in 1:N) {
# Calcul de U[n+1] avec ajout de bruit gaussien
U[n + 1] <- a * U[n]^c + b + rnorm(1, mean = 0, sd = 1)
}
return(U)
}
# Générer une base de données avec les valeurs de a, b, c et U[0], U[1], ..., U[100]
base_brutee <- data.frame(matrix(ncol = N + 4, nrow = M))  # Base vide (n lignes, N+4 colonnes)
# Noms des colonnes : a, b, c, U[0], ..., U[100]
colnames(base_brutee) <- c("a", "b", "c", paste0("U", 0:N))
# Remplir la base avec les valeurs simulées de a, b, c et les valeurs de U
for (i in 1:M) {
base_brutee[i, 1] <- sim_a[i]  # Valeur de a
base_brutee[i, 2] <- sim_b[i]  # Valeur de b
base_brutee[i, 3] <- sim_c[i]  # Valeur de c
base_brutee[i, 4] <- sim_Uo[i]  # Valeur de Uo
U_values_bruité <- Generate_output_with_noise(N, sim_a[i], sim_b[i], sim_c[i], sim_Uo[i])  # Générer
base_brutee[i, 4:(N + 4)] <- U_values_bruité  # Remplir les colonnes U[0] à U[100]
}
base_brutee %>%
mutate(Individu = 1:M) %>%               # Ajouter la colonne 'Individu'
melt(id.vars = c("a", "b", "c", "Individu"),
variable.name = "Iteration",
value.name = "U") %>%                # Restructurer le dataframe
mutate(Iteration = as.numeric(gsub("U", "", Iteration))) %>%  # Convertir la colonne 'Iteration' en numérique
ggplot(aes(x = Iteration, y = U, color = factor(Individu))) + # Graphique ggplot
geom_line(size = 1) +                     # Tracer les courbes pour chaque individu
labs(title = "Évolution de U[n] bruité pour chaque individu",
x = "Itération (N)",
y = "Valeur de U[N]",
color = "Individu") +
theme_minimal()
View(base_brutee)
base_brutee[i, 4:(N + 4)] <- round(U_values_bruité,2)  # Remplir les colonnes U[0] à U[100]
# Définition de la fonction avec ajout de bruit
Generate_output_with_noise <- function(N, a, b, c, U0) {
U <- numeric(N + 1)
U[1] <- U0
for (n in 1:N) {
# Calcul de U[n+1] avec ajout de bruit gaussien
U[n + 1] <- a * U[n]^c + b + rnorm(1, mean = 0, sd = 1)
}
return(U)
}
# Générer une base de données avec les valeurs de a, b, c et U[0], U[1], ..., U[100]
base_brutee <- data.frame(matrix(ncol = N + 4, nrow = M))  # Base vide (n lignes, N+4 colonnes)
# Noms des colonnes : a, b, c, U[0], ..., U[100]
colnames(base_brutee) <- c("a", "b", "c", paste0("U", 0:N))
# Remplir la base avec les valeurs simulées de a, b, c et les valeurs de U
for (i in 1:M) {
base_brutee[i, 1] <- sim_a[i]  # Valeur de a
base_brutee[i, 2] <- sim_b[i]  # Valeur de b
base_brutee[i, 3] <- sim_c[i]  # Valeur de c
base_brutee[i, 4] <- sim_Uo[i]  # Valeur de Uo
U_values_bruité <- Generate_output_with_noise(N, sim_a[i], sim_b[i], sim_c[i], sim_Uo[i])  # Générer
base_brutee[i, 4:(N + 4)] <- round(U_values_bruité,2)  # Remplir les colonnes U[0] à U[100]
}
base_brutee %>%
mutate(Individu = 1:M) %>%               # Ajouter la colonne 'Individu'
melt(id.vars = c("a", "b", "c", "Individu"),
variable.name = "Iteration",
value.name = "U") %>%                # Restructurer le dataframe
mutate(Iteration = as.numeric(gsub("U", "", Iteration))) %>%  # Convertir la colonne 'Iteration' en numérique
ggplot(aes(x = Iteration, y = U, color = factor(Individu))) + # Graphique ggplot
geom_line(size = 1) +                     # Tracer les courbes pour chaque individu
labs(title = "Évolution de U[n] bruité pour chaque individu",
x = "Itération (N)",
y = "Valeur de U[N]",
color = "Individu") +
theme_minimal()
set.seed(123)  # Pour la reproductibilité
Output_Curves<-base_root[, 5:(N + 4)]
matrice_bruit_aleatoire <- matrix(rnorm(M * N), nrow = M, ncol = N)
Main_Learning_Base<-Output_Curves+matrice_bruit_aleatoire
View(Main_Learning_Base)
